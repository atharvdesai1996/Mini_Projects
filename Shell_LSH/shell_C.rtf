{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11820\viewh8700\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /* The shell will consist of three functions.\
Read a command\
Parse every argument \
Exit the shell\
APIs to support\
lsh_read_command_line()\
lsh_split_into_separate_commands()\
lsh_start_shell()\
lsh_execute_commands()\
\
Builtin shell commands helper APIs\
lsh_cd()\
lsh_help()\
lsh_exit()\
*/\
\
#include <stdlib.h>\
#include <stdio.h>\
#include <stdbool.h>\
#include <string.h>\
#include <unistd.h>\
#include <sys/types.h>\
#include <sys/wait.h>\
\
# define COMMAND_BLOCK_SIZE 1024\
# define NO_OF_COMMANDS 64\
// spaces ( ), tabs (\\t), carriage returns (\\r), newlines (\\n), and alert characters (\\a).\
#define LSH_TOK_DELIM " \\t\\r\\n\\a" \
\
\
// Builtin Commands and their definitions\
char *commands_list[] = \{"cd", "help" , "exit"\};\
\
\
\
int command_cd (char** args)\
\{\
  if (args[1] == NULL) \{\
    printf(" expected argument to cd\\n");\
  \} else \{\
    if (chdir(args[1]) != 0) \{ \
      perror("error executing chdir call!!");\
    \}\
  \}\
  return 1;\
\}\
\
int command_help(char **args)\
\{\
  printf("Lets build our Shell\\n");\
  printf("The following are built in:\\n");\
\
  for (int i = 0; i < 3; i++) \{\
    printf("  %s\\n", commands_list[i]);\
  \}\
\
  return 1;\
\}\
\
int command_exit(char **args)\
\{\
  return 0;\
\}\
\
\
// Array of function pointers with helper functions for implemented Commands\
int (*commands_callback_fn[]) (char**) = \{ &command_cd, &command_help, &command_exit\};\
\
char* lsh_read_command_line(void)\
\{\
    // Allocate a buffer of initial size 1024\
    char *buffer = (char*) malloc(sizeof(char)*COMMAND_BLOCK_SIZE);\
    int iterator = 0;\
    int allocated_size = COMMAND_BLOCK_SIZE;\
    do\{\
        char entered_char = getchar();\
        // command terminating condition\
        if (entered_char == '\\n' || entered_char == EOF)\
        \{\
            buffer[iterator] = '\\0';\
            return buffer;\
        \}\
        else\
        \{\
            buffer[iterator] = entered_char;\
        \}\
        \
        if (iterator >= allocated_size)\
        \{\
            // Reallocate additional 1024 bytes\
            allocated_size += COMMAND_BLOCK_SIZE;\
            buffer = (char*)realloc(buffer, allocated_size);\
        \}\
        iterator++;\
    \} while (true);\
    \
\}\
\
char ** lsh_split_into_separate_commands(char* line)\
\{\
    \
    int no_of_commands = NO_OF_COMMANDS;\
    \
    // This is array of pointers and every pointer there will store commands\
    char** arr_of_ptr_to_tokens = (char**)malloc(sizeof(char*)*no_of_commands);\
    char *token = NULL; // This pointer \
    int iterator = 0;\
    \
    token = strtok(line, LSH_TOK_DELIM);\
    while (token != NULL)\
    \{\
        arr_of_ptr_to_tokens[iterator] = token;\
        iterator++;\
        \
        if (iterator >= no_of_commands)\
        \{\
            no_of_commands += NO_OF_COMMANDS;\
            // Reallocate the array of pointers\
            arr_of_ptr_to_tokens = realloc(arr_of_ptr_to_tokens, no_of_commands);\
        \}\
        \
        token = strtok(NULL, LSH_TOK_DELIM);\
    \}\
    // Add final null token\
    arr_of_ptr_to_tokens[iterator] = NULL;\
    \
    return arr_of_ptr_to_tokens;\
\}\
\
int lsh_launch_commands(char **arr_of_ptr_to_tokens)\
\{\
    // Fork a process into child process\
     pid_t process_id = fork();\
     int status;\
    // If fork fails exit \
    if (process_id < 0)\
    \{\
        perror("fork failed");\
    \}\
    // If the fork returns a child process \
    else if (process_id == 0)\
    \{\
        // Execute the commands from token\
        if (execvp(*arr_of_ptr_to_tokens[0], arr_of_ptr_to_tokens) != 0)\
        \{\
            perror("exec failed");\
        \}\
        return 1;\
    \}\
    // If parent process then wait for interrupts \
    else \
    \{\
        do \{\
            int w = waitpid(process_id, &status, WUNTRACED | WCONTINUED);\
            if (w == -1) \{\
                perror("waitpid");\
                exit(EXIT_FAILURE);\
            \}\
\
           if (WIFEXITED(status)) \{\
                printf("exited, status=%d\\n", WEXITSTATUS(status));\
            \} else if (WIFSIGNALED(status)) \{\
                printf("killed by signal %d\\n", WTERMSIG(status));\
            \} else if (WIFSTOPPED(status)) \{\
                printf("stopped by signal %d\\n", WSTOPSIG(status));\
            \} else if (WIFCONTINUED(status)) \{\
                printf("continued\\n");\
            \}\
        \} while (!WIFEXITED(status) && !WIFSIGNALED(status));\
        exit(EXIT_SUCCESS);\
    \}\
    \
    \
    \
\}\
\
// API to execute each token \
int lsh_execute_commands(char **arr_of_ptr_to_tokens)\
\{\
    if (arr_of_ptr_to_tokens[0] == NULL)\
    \{\
        perror("empty command");\
    \}\
    \
    // Now compare if the entered argument is a known command implemented by us\
    for (int i=0; i < 3; i++)\
    \{\
        if (strcmp(arr_of_ptr_to_tokens[0], commands_list[i]) == 0)\
        \{\
           return commands_callback_fn[i] (arr_of_ptr_to_tokens);\
        \}\
    \}\
    // If builtin commands not found, launch new process\
    return lsh_launch_commands(arr_of_ptr_to_tokens);\
\
\}\
\
\
\
\
\
int main()\
\{\
    char *command_line;\
    char **individual_commands;\
    int command_exit_status = 0;\
    // Loop where Shell runs\
    do \{\
        printf("$ ");\
        \
        command_line = lsh_read_command_line(); //. Read the command\
        individual_commands = lsh_split_into_separate_commands(command_line); // Split into commands\
        command_exit_status = lsh_execute_commands(individual_commands); // Execute the commands\
        \
    \} while (command_exit_status);\
    \
    \
    \
\}}